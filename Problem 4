import wave

import numpy as np


def dtw(s, t):
    n, m = len(s), len(t)
    dtw_matrix = np.zeros((n + 1, m + 1))
    for i in range(n + 1):
        for j in range(m + 1):
            dtw_matrix[i, j] = np.inf
    dtw_matrix[0, 0] = 0

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            cost = abs(s[i - 1] - t[j - 1])
            # take last min from a square box
            last_min = np.min([dtw_matrix[i - 1, j], dtw_matrix[i, j - 1], dtw_matrix[i - 1, j - 1]])
            dtw_matrix[i, j] = cost + last_min
    return dtw_matrix


# Read wav audio file
jntFullAudio = wave.open(
    'C:/.SOFTWARE ENGINE SEM 4/WIA2005 - ALGORITHM DESIGN AND ANALYSIS/Assignment/Group Project/audio/JT beri '
    'penjelasan memohon maaf.wav')
signal_jntFullAudio = jntFullAudio.readframes(-1)

jnt = wave.open(
    'C:/.SOFTWARE ENGINE SEM 4/WIA2005 - ALGORITHM DESIGN AND ANALYSIS/Assignment/Group Project/audio/jnt.wav')
signal_jnt = jnt.readframes(-1)

# Convert audio bytes to integers
soundWave_jntFullAudio = np.frombuffer(signal_jntFullAudio, dtype='int16')
soundWave_jnt = np.frombuffer(signal_jnt, dtype='int16')

# View the first 1000 sound wave valuesprint(len(soundWave_jntFullAudio))
print(soundWave_jntFullAudio[:1000])
print(len(soundWave_jnt))
print(soundWave_jnt[:1000])
print()
print(len(soundWave_jntFullAudio))
print(soundWave_jntFullAudio[:1000])


print(dtw(soundWave_jnt, soundWave_jnt))
